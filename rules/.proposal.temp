# 数据操作方案设计

## 系统工作流程

### 实例管理流程
- 系统启动时初始化 5 个实例记录
- 每个实例分配固定端口 (8081-8085)
- 实例状态在 IDLE 和 RUNNING 间切换
- 记录实例的活跃时间用于监控

### 数据操作场景
- 查询空闲实例
- 更新实例状态
- 更新实例活跃时间
- 重置实例状态

## 核心数据操作需求

### 查询操作
- 获取指定 instance_id 的实例信息
- 获取第一个空闲实例
- 获取所有实例状态
- 检查实例是否存在

### 更新操作
- 更新实例状态 (IDLE ↔ RUNNING)
- 更新实例最后活跃时间
- 重置实例（状态回到 IDLE）

### 初始化操作
- 创建数据表
- 初始化实例记录
- 重置所有实例状态

## 技术实现重点

### 数据一致性
- 实例状态变更必须是原子操作
- 避免重复分配同一实例
- 确保端口号唯一性

### 性能考虑
- 快速查找空闲实例
- 高效的状态更新
- 最小化数据库操作

### 可维护性
- 清晰的状态转换逻辑
- 完整的错误处理
- 便于调试的日志记录

## 潜在风险

### 并发问题
- 多用户同时请求空闲实例
- 状态更新冲突
- 死锁风险

### 数据一致性
- 实例状态与实际不符
- 端口重复分配
- 孤立实例记录

### 性能问题
- 频繁的状态更新
- 重复的数据库查询
- 连接池耗尽

## 解决方案

### 数据访问层设计
- 使用单例模式管理数据库连接
- 实现基本的 CRUD 操作
- 提供事务支持

### 状态管理
- 使用整型表示状态
- 实现状态转换验证
- 提供状态重置机制

### 并发控制
- 使用数据库事务
- 实现乐观锁或悲观锁
- 添加超时机制

## 验证方法

### 功能测试
- 实例状态转换测试
- 并发分配测试
- 异常恢复测试

### 性能测试
- 高并发下的状态更新
- 大量实例查询
- 长时间运行稳定性
