# ObjectBox Admin 实例监控方案

## 1. 当前系统分析

### 1.1 现有架构
- FastAPI Web服务 (8000端口)
- Nginx 反向代理
- Docker 容器化实例
- SQLite 数据存储

### 1.2 问题描述
- 实例状态监控缺失
- 无法修改 objectbox-admin 页面
- 缺乏实例生命周期管理
- WebSocket 连接需求

## 2. 解决方案

### 2.1 核心思路
- 保持原页面作为监控页
- 新窗口打开 objectbox-admin
- WebSocket 实时状态同步
- 完整的实例生命周期管理

### 2.2 技术架构
```
[FastAPI Server]
    ├── WebSocket 连接管理
    ├── 实例状态管理
    └── 数据库操作

[Nginx Proxy]
    ├── WebSocket 支持
    └── 实例路由

[Instance Monitor]
    ├── 状态显示
    ├── WebSocket 客户端
    └── 实例控制
```

## 3. 实现细节

### 3.1 前端改造
```javascript
// instance_upload.html 转换为监控页
class InstanceMonitor {
    constructor(instanceId) {
        this.instanceId = instanceId;
        this.ws = null;
        this.status = {
            instance: 'UNKNOWN',
            connection: 'DISCONNECTED'
        };
    }

    // WebSocket 连接管理
    async connect() {...}
    
    // UI 更新
    updateStatus() {...}
    
    // 实例控制
    async destroyInstance() {...}
}
```

### 3.2 后端实现
```python
# WebSocket 路由
@router.websocket("/ws/{instance_id}")
async def websocket_endpoint(websocket: WebSocket, instance_id: int):
    await websocket.accept()
    try:
        await handle_websocket(websocket, instance_id)
    except WebSocketDisconnect:
        await handle_disconnect(instance_id)

# 状态管理
async def handle_websocket(websocket: WebSocket, instance_id: int):
    while True:
        try:
            # 心跳检测
            # 状态更新
            # 错误处理
        except Exception:
            await handle_error(instance_id)
```

### 3.3 数据结构
```sql
-- 实例状态表扩展
ALTER TABLE instances ADD COLUMN ws_status TEXT DEFAULT 'DISCONNECTED';
ALTER TABLE instances ADD COLUMN last_heartbeat TIMESTAMP;
```

## 4. 部署流程

### 4.1 文件结构
```
app/
├── websocket/
│   └── routes.py      # WebSocket 路由
├── static/
│   └── js/
│       └── monitor.js # 监控页面脚本
├── templates/
│   └── instance_monitor.html
└── app.py
```

### 4.2 配置更新
```nginx
# Nginx WebSocket 配置
location /ws/ {
    proxy_pass http://localhost:8000;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
}
```

## 5. 实现步骤

1. **基础设施准备**
   - 添加 WebSocket 路由
   - 更新数据库结构
   - 配置 Nginx 支持

2. **后端实现**
   - 实例状态管理
   - WebSocket 连接处理
   - 心跳机制实现

3. **前端改造**
   - 监控页面设计
   - WebSocket 客户端
   - 状态显示组件

4. **测试验证**
   - 连接稳定性
   - 状态同步
   - 错误处理

## 6. 注意事项

### 6.1 性能考虑
- WebSocket 连接数限制
- 心跳间隔优化
- 资源清理机制

### 6.2 安全性
- WebSocket 认证
- 状态验证
- 错误处理

### 6.3 可靠性
- 自动重连机制
- 状态恢复
- 错误降级

## 7. 后续优化

1. **监控增强**
   - 资源使用统计
   - 日志聚合
   - 告警机制

2. **用户体验**
   - 状态可视化
   - 操作确认
   - 错误提示

3. **管理功能**
   - 批量操作
   - 定时任务
   - 备份恢复
